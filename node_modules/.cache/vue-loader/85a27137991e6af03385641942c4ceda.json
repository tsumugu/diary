{"remainingRequest":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tsumugu/Documents/dev/vue/diary/src/views/RegistEventInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tsumugu/Documents/dev/vue/diary/src/views/RegistEventInfo.vue","mtime":1608295782506},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZScKdmFyIGRhdGFiYXNlID0gZmlyZWJhc2UuZGF0YWJhc2UoKTsKCmltcG9ydCBTMyBmcm9tICdhd3MtczMnOwpjb25zdCBTM0NvbmZpZyA9IHsKICBidWNrZXROYW1lOiAndHN1bXVndS1kaWFyeScsCiAgZGlyTmFtZTogJ3VwbG9hZHMnLAogIHJlZ2lvbjogJ2FwLW5vcnRoZWFzdC0xJywKICBhY2Nlc3NLZXlJZDogJ0FLSUFSTjdBQlFYV1JBTzUySjNLJywKICBzZWNyZXRBY2Nlc3NLZXk6ICdiWWlqcFU0UytlenhQQVljbkk5anFTUTdBRzRjT1hkZ1NNOCthUzJVJwp9CmNvbnN0IFMzQ2xpZW50ID0gbmV3IFMzKFMzQ29uZmlnKQoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJyZWdpc3QiLAogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgaXNTaWduSW46IG51bGwsCiAgICAgIHVzZXJJbmZvOiBudWxsLAogICAgICBpc05vd0xvYWRpbmc6IHRydWUsCiAgICAgIHVwbG9hZEZpbGVzOiBudWxsLAogICAgICB1cGxvYWRQcm9taXNlTGlzdDogW10sCiAgICAgIHByZXZpZXdJbWFnZUxpc3Q6IFtdLAogICAgICBwbGFjZUxpc3Q6IFsKICAgICAgICB7aWQ6InRoaXNpc2lkLWFhYWEiLCBuYW1lOiJUb2t5byJ9LAogICAgICAgIHtpZDoidGhpc2lzaWQtYmJiYiIsIG5hbWU6Ikt5b3RvIn0sCiAgICAgICAge2lkOiJ0aGlzaXNpZC1jY2NjIiwgbmFtZToiSG9ra2FpZG8ifQogICAgICBdLAogICAgICBmcmllbmRzTGlzdDogWwogICAgICAgIHtpZDoidGhpc2lzaWQtZGRkZCIsIG5hbWU6IlRhcm8ifSwKICAgICAgICB7aWQ6InRoaXNpc2lkLWVlZWUiLCBuYW1lOiJKaXJvIn0sCiAgICAgICAge2lkOiJ0aGlzaXNpZC1mZmZmIiwgbmFtZToiU2FidXJvIn0KICAgICAgXSwKICAgICAgd2hlbjogbnVsbCwKICAgICAgd2hlcmU6IG51bGwsCiAgICAgIHdobzogbnVsbCwKICAgICAgd2hhdDogbnVsbAogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgb25GaWxlQ2hhbmdlKGUpIHsKICAgICAgY29uc3QgZmlsZXMgPSBlLnRhcmdldC5maWxlcyB8fCBlLmRhdGFUcmFuc2Zlci5maWxlczsKICAgICAgdGhpcy51cGxvYWRGaWxlcyA9IGZpbGVzCiAgICAgIEFycmF5LmZyb20oZmlsZXMpLmZvckVhY2goZmlsZSA9PiB7CiAgICAgICAgdGhpcy5jcmVhdGVQcmV2aWV3SW1hZ2UoZmlsZSkKICAgICAgfSk7CiAgICAgIC8vdGhpcy5jcmVhdGVQcmV2aWV3SW1hZ2UoZmlsZXMpCiAgICB9LAogICAgY3JlYXRlUHJldmlld0ltYWdlKGZpbGUpIHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IGUgPT4gewogICAgICAgIHRoaXMucHJldmlld0ltYWdlTGlzdC5wdXNoKGUudGFyZ2V0LnJlc3VsdCk7CiAgICAgIH07CiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpOwogICAgfSwKICAgIGdlblJhbmRvbUZpbGVOYW1lKCkgewogICAgICB2YXIgc3Ryb25nID0gMTAwMDsKICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpLnRvU3RyaW5nKDE2KSAgKyBNYXRoLmZsb29yKHN0cm9uZypNYXRoLnJhbmRvbSgpKS50b1N0cmluZygxNikKICAgIH0sCiAgICB1cGxvYWRJbWcoZmlsZSwgbmV3RmlsZU5hbWUpIHsKICAgICAgcmV0dXJuIFMzQ2xpZW50LnVwbG9hZEZpbGUoZmlsZSwgbmV3RmlsZU5hbWUpCiAgICAgIC8vIFNUVUIKICAgICAgLyoKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICByZXNvbHZlKCJodHRwczovL2V4YW1wbGUuY29tL3h4eC5qcGciKTsKICAgICAgfSk7CiAgICAgICovCiAgICB9LAogICAgb25TdWJtaXQoKSB7CiAgICAgIC8v5b+F6aCI6aCF55uu44Gu44OB44Kn44OD44KvCiAgICAgIHRoaXMuc3VibWl0QWxsKCk7CiAgICAgIC8qCiAgICAgIGlmIChVc2VyUG9zdEluZm9PYmoud2hlbiAhPSBudWxsICYmIFVzZXJQb3N0SW5mb09iai53aGVyZSAhPSBudWxsICYmIFVzZXJQb3N0SW5mb09iai53aGF0ICE9IG51bGwpIHsKICAgICAgICBpZiAoVXNlclBvc3RJbmZvT2JqLndoZW4ucmVwbGFjZSgvXHMrL2csJycpLmxlbmd0aCA+IDAgJiYgVXNlclBvc3RJbmZvT2JqLndoZXJlLnJlcGxhY2UoL1xzKy9nLCcnKS5sZW5ndGggPiAwICYmIFVzZXJQb3N0SW5mb09iai53aGF0LnJlcGxhY2UoL1xzKy9nLCcnKS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAvLwogICAgICAgICAgc3VibWl0QWxsKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsZXJ0KCJ3aGVuLCB3aGVyZSwgd2hhdOOBr+W/hemgiOmgheebruOBp+OBmSIpCiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGFsZXJ0KCJ3aGVuLCB3aGVyZSwgd2hhdOOBr+W/hemgiOmgheebruOBp+OBmSIpCiAgICAgIH0KICAgICAgKi8KICAgIH0sCiAgICBzdWJtaXRBbGwoKSB7CiAgICAgIC8vIHN1Ym1pdOWHpueQhgogICAgICAvLyAxLiDnlLvlg4/jgpJTM+OBq+OCouODg+ODl+ODreODvOODieOBmeOCiwogICAgICBpZiAodGhpcy51cGxvYWRGaWxlcyAhPSBudWxsKSB7CiAgICAgICAgQXJyYXkuZnJvbSh0aGlzLnVwbG9hZEZpbGVzKS5mb3JFYWNoKGZpbGUgPT4gewogICAgICAgICAgdGhpcy51cGxvYWRQcm9taXNlTGlzdC5wdXNoKHRoaXMudXBsb2FkSW1nKGZpbGUsIHRoaXMuZ2VuUmFuZG9tRmlsZU5hbWUoKSkpCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgLy8gMi4g44Ki44OD44OX44Ot44O844OJ44GM5a6M5LqG44GX44Gf44KJ44GZ44G544Gm44Gu5oOF5aCx44KS5ZCI44KP44Gb44GmUmVhbHRpbWVEQuOBq3NldAogICAgICBQcm9taXNlLmFsbCh0aGlzLnVwbG9hZFByb21pc2VMaXN0KS50aGVuKChTM0ltYWdlVXJscykgPT4gewogICAgICAgIGNvbnNvbGUubG9nKFMzSW1hZ2VVcmxzKQogICAgICAgIC8vREVCVUcKICAgICAgICAvKgogICAgICAgIHZhciBVc2VyUG9zdEluZm9PYmogPSB7CiAgICAgICAgICB3aGVuOiB0aGlzLndoZW4sCiAgICAgICAgICB3aGVyZTogdGhpcy53aGVyZSwKICAgICAgICAgIHdobzogdGhpcy53aG8sCiAgICAgICAgICB3aGF0OiB0aGlzLndoYXQsCiAgICAgICAgICBpbWdVcmxzOiBTM0ltYWdlVXJscwogICAgICAgIH0KICAgICAgICAvL0RC44Gr5L+d5a2YCiAgICAgICAgdGhpcy5zZXRGaXJlYmFzZVJlYWx0aW1lREIoVXNlclBvc3RJbmZvT2JqKQogICAgICAgICovCiAgICAgIH0pOwogICAgfSwKICAgIHNldEZpcmViYXNlUmVhbHRpbWVEQihPYmopIHsKICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoInBvc3RzLyIrdGhpcy51c2VySW5mby51aWQpLnB1c2goT2JqKS50aGVuKCgpID0+IHsKICAgICAgICBhbGVydCgi5oqV56i/44GX44G+44GX44Gf77yBIikKICAgICAgfSkKICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7CiAgICAgICAgLy9vbkVycm9yCiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpCiAgICAgICAgYWxlcnQoIuaKleeov+OBq+WkseaVl+OBl+OBvuOBl+OBnyIpCiAgICAgIH0pCiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgY29uc3QgX3RoaXMgPSB0aGlzCiAgICBmaXJlYmFzZS5hdXRoKCkub25BdXRoU3RhdGVDaGFuZ2VkKHVzZXIgPT4gewogICAgICBfdGhpcy5pc1NpZ25JbiA9ICh1c2VyICE9IG51bGwpCiAgICAgIF90aGlzLnVzZXJJbmZvID0gdXNlcgogICAgICBfdGhpcy5pc05vd0xvYWRpbmcgPSBmYWxzZQogICAgfSkKICB9Cn0K"},{"version":3,"sources":["RegistEventInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RegistEventInfo.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"regist\">\n    <div class=\"regist__loading\" v-if=\"isNowLoading\"><!-- Loading --></div>\n    <div class=\"regist__body\" v-else>\n      <div class=\"regist__body__signined\" v-if=\"isSignIn\">\n        <!-- form -->\n        <div><input type=\"datetime-local\" placeholder=\"日付\" v-model=\"when\" /></div>\n        <div><select v-model=\"where\"><option disabled value=\"\">場所</option><option v-for=\"(val, key) in placeList\" v-bind:value=\"val.id\">{{val.name}}</option></select></div>\n        <div><select v-model=\"who\"><option disabled value=\"\">誰と行ったか</option><option v-for=\"(val, key) in friendsList\" v-bind:value=\"val.id\">{{val.name}}</option></select></div>\n        <div><textarea placeholder=\"したこと\" v-model=\"what\" /></div>\n        <div class=\"imgPreview\">\n          <img v-bind:src=\"src\" v-for=\"(src, key) in previewImageList\" :key=\"key\">\n        </div>\n        <div><input type=\"file\" @change=\"onFileChange\" accept=\"image/*\" multiple /></div>\n        <div><button v-on:click=\"onSubmit\">投稿</button></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport firebase from 'firebase'\nvar database = firebase.database();\n\nimport S3 from 'aws-s3';\nconst S3Config = {\n  bucketName: 'tsumugu-diary',\n  dirName: 'uploads',\n  region: 'ap-northeast-1',\n  accessKeyId: 'AKIARN7ABQXWRAO52J3K',\n  secretAccessKey: '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'\n}\nconst S3Client = new S3(S3Config)\n\nexport default {\n  name: \"regist\",\n  data () {\n    return {\n      isSignIn: null,\n      userInfo: null,\n      isNowLoading: true,\n      uploadFiles: null,\n      uploadPromiseList: [],\n      previewImageList: [],\n      placeList: [\n        {id:\"thisisid-aaaa\", name:\"Tokyo\"},\n        {id:\"thisisid-bbbb\", name:\"Kyoto\"},\n        {id:\"thisisid-cccc\", name:\"Hokkaido\"}\n      ],\n      friendsList: [\n        {id:\"thisisid-dddd\", name:\"Taro\"},\n        {id:\"thisisid-eeee\", name:\"Jiro\"},\n        {id:\"thisisid-ffff\", name:\"Saburo\"}\n      ],\n      when: null,\n      where: null,\n      who: null,\n      what: null\n    }\n  },\n  methods: {\n    onFileChange(e) {\n      const files = e.target.files || e.dataTransfer.files;\n      this.uploadFiles = files\n      Array.from(files).forEach(file => {\n        this.createPreviewImage(file)\n      });\n      //this.createPreviewImage(files)\n    },\n    createPreviewImage(file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        this.previewImageList.push(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    },\n    genRandomFileName() {\n      var strong = 1000;\n      return new Date().getTime().toString(16)  + Math.floor(strong*Math.random()).toString(16)\n    },\n    uploadImg(file, newFileName) {\n      return S3Client.uploadFile(file, newFileName)\n      // STUB\n      /*\n      return new Promise((resolve, reject) => {\n        resolve(\"https://example.com/xxx.jpg\");\n      });\n      */\n    },\n    onSubmit() {\n      //必須項目のチェック\n      this.submitAll();\n      /*\n      if (UserPostInfoObj.when != null && UserPostInfoObj.where != null && UserPostInfoObj.what != null) {\n        if (UserPostInfoObj.when.replace(/\\s+/g,'').length > 0 && UserPostInfoObj.where.replace(/\\s+/g,'').length > 0 && UserPostInfoObj.what.replace(/\\s+/g,'').length > 0) {\n          //\n          submitAll();\n        } else {\n          alert(\"when, where, whatは必須項目です\")\n        }\n      } else {\n        alert(\"when, where, whatは必須項目です\")\n      }\n      */\n    },\n    submitAll() {\n      // submit処理\n      // 1. 画像をS3にアップロードする\n      if (this.uploadFiles != null) {\n        Array.from(this.uploadFiles).forEach(file => {\n          this.uploadPromiseList.push(this.uploadImg(file, this.genRandomFileName()))\n        });\n      }\n      // 2. アップロードが完了したらすべての情報を合わせてRealtimeDBにset\n      Promise.all(this.uploadPromiseList).then((S3ImageUrls) => {\n        console.log(S3ImageUrls)\n        //DEBUG\n        /*\n        var UserPostInfoObj = {\n          when: this.when,\n          where: this.where,\n          who: this.who,\n          what: this.what,\n          imgUrls: S3ImageUrls\n        }\n        //DBに保存\n        this.setFirebaseRealtimeDB(UserPostInfoObj)\n        */\n      });\n    },\n    setFirebaseRealtimeDB(Obj) {\n      firebase.database().ref(\"posts/\"+this.userInfo.uid).push(Obj).then(() => {\n        alert(\"投稿しました！\")\n      })\n      .catch(function(error) {\n        //onError\n        console.log(error)\n        alert(\"投稿に失敗しました\")\n      })\n    }\n  },\n  mounted() {\n    const _this = this\n    firebase.auth().onAuthStateChanged(user => {\n      _this.isSignIn = (user != null)\n      _this.userInfo = user\n      _this.isNowLoading = false\n    })\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.regist {\n  width: 100%;\n  height: 100%;\n  &__loading {\n    width: 100%;\n    height: 100%;\n  }\n  &__body {\n    width: 100%;\n    height: 100%;\n    &__signined {\n      width: 100%;\n      height: 100%;\n    }\n  }\n}\n.imgPreview > img {\n  width: 100px;\n}\n</style>"]}]}