{"remainingRequest":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tsumugu/Documents/dev/vue/diary/src/views/RegistEventInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tsumugu/Documents/dev/vue/diary/src/views/RegistEventInfo.vue","mtime":1608387253509},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IEltZ1VwbG9hZGVyIGZyb20gJy4uL2Fzc2V0cy9JbWdVcGxvYWRlci5qcycKaW1wb3J0IFBsYWNlc01hbmFnZXIgZnJvbSAnLi4vYXNzZXRzL1BsYWNlc01hbmFnZXIuanMnCmltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZScKdmFyIGRhdGFiYXNlID0gZmlyZWJhc2UuZGF0YWJhc2UoKQoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJyZWdpc3QiLAogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgaXNTaWduSW46IG51bGwsCiAgICAgIHVzZXJJbmZvOiBudWxsLAogICAgICBpc05vd0xvYWRpbmc6IHRydWUsCiAgICAgIElVOiBudWxsLAogICAgICBQTTogbnVsbCwKICAgICAgdXBsb2FkRmlsZXM6IG51bGwsCiAgICAgIHVwbG9hZFByb21pc2VMaXN0OiBbXSwKICAgICAgcHJldmlld0ltYWdlTGlzdDogW10sCiAgICAgIHN1Ym1pdEltYWdlVXJsTGlzdDogW10sCiAgICAgIHVzZXJBZGRlZFBsYWNlTGlzdDogW10sCiAgICAgIG5lYXJieVBsYWNlTGlzdDogW10sCiAgICAgIHBsYWNlTGlzdDogW10sCiAgICAgIGZyaWVuZHNMaXN0OiBbCiAgICAgICAge2lkOiJ0aGlzaXNpZC1kZGRkIiwgbmFtZToiVGFybyJ9LAogICAgICAgIHtpZDoidGhpc2lzaWQtZWVlZSIsIG5hbWU6Ikppcm8ifSwKICAgICAgICB7aWQ6InRoaXNpc2lkLWZmZmYiLCBuYW1lOiJTYWJ1cm8ifQogICAgICBdLAogICAgICB3aGVyZUFkZDogbnVsbCwKICAgICAgd2hlbjogbnVsbCwKICAgICAgd2hlcmU6IG51bGwsCiAgICAgIHdobzogbnVsbCwKICAgICAgd2hhdDogbnVsbAogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIHVzZXJBZGRlZFBsYWNlTGlzdCgpIHsKICAgICAgdGhpcy5vbkNoYW5nZVBsYWNlTGlzdCgpCiAgICB9LAogICAgbmVhcmJ5UGxhY2VMaXN0KCkgewogICAgICB0aGlzLm9uQ2hhbmdlUGxhY2VMaXN0KCkKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIG9uRmlsZUNoYW5nZShlKSB7CiAgICAgIGNvbnN0IGZpbGVzID0gZS50YXJnZXQuZmlsZXMgfHwgZS5kYXRhVHJhbnNmZXIuZmlsZXM7CiAgICAgIHRoaXMudXBsb2FkRmlsZXMgPSBmaWxlcwogICAgICBBcnJheS5mcm9tKGZpbGVzKS5mb3JFYWNoKGZpbGUgPT4gewogICAgICAgIHRoaXMuY3JlYXRlUHJldmlld0ltYWdlKGZpbGUpCiAgICAgIH0pCiAgICAgIC8vdGhpcy5jcmVhdGVQcmV2aWV3SW1hZ2UoZmlsZXMpCiAgICB9LAogICAgb25DaGFuZ2VQbGFjZUxpc3QoKSB7CiAgICAgIHRoaXMucGxhY2VMaXN0ID0gW10KICAgICAgdGhpcy5wbGFjZUxpc3QgPSB0aGlzLnVzZXJBZGRlZFBsYWNlTGlzdC5jb25jYXQodGhpcy5uZWFyYnlQbGFjZUxpc3QpCiAgICAgIC8vY29uc29sZS5sb2codGhpcy5wbGFjZUxpc3QsIHRoaXMubmVhcmJ5UGxhY2VMaXN0LCB0aGlzLnVzZXJBZGRlZFBsYWNlTGlzdCkKICAgIH0sCiAgICBjcmVhdGVQcmV2aWV3SW1hZ2UoZmlsZSkgewogICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpCiAgICAgIHJlYWRlci5vbmxvYWQgPSBlID0+IHsKICAgICAgICB0aGlzLnByZXZpZXdJbWFnZUxpc3QucHVzaChlLnRhcmdldC5yZXN1bHQpCiAgICAgIH0KICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSkKICAgIH0sCiAgICB1cGxvYWRJbWcoZmlsZSkgewogICAgICByZXR1cm4gdGhpcy5JVS51cGxvYWQoZmlsZSkKICAgIH0sCiAgICBvbkFkZFdoZXJlQnV0dG9uKCkgewogICAgICAvL3RoaXMud2hlcmVBZGTjgafmpJzntKLjgZfjgabjgb/jgosKICAgICAgdGhpcy5QTS5zZWFyY2hwbGFjZXNieW5hbWUodGhpcy53aGVyZUFkZCkudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAvLyBzZWxlY3TjgpLmm7TmlrAKICAgICAgICB0aGlzLnVzZXJBZGRlZFBsYWNlTGlzdCA9IFtdCiAgICAgICAgdGhpcy51c2VyQWRkZWRQbGFjZUxpc3QucHVzaCh7bmFtZTogIi0tIFNlYXJjaCBSZXN1bHQgLS0iLCBwbGFjZV9pZDogbnVsbH0pCiAgICAgICAgcmVzcG9uc2UuZGF0YS5mb3JFYWNoKChwbGFjZSkgPT4gewogICAgICAgICAgdGhpcy51c2VyQWRkZWRQbGFjZUxpc3QucHVzaChwbGFjZSkKICAgICAgICB9KQogICAgICAgIHRoaXMudXNlckFkZGVkUGxhY2VMaXN0LnB1c2goe25hbWU6ICItLSBHUFMgUmVzdWx0IC0tIiwgcGxhY2VfaWQ6IG51bGx9KQogICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHsKICAgICAgICBjb25zb2xlLmxvZygiUGxhY2VzIE1hbmFnZXIgRXJyb3IiLCBlcnJvcikKICAgICAgfSkKICAgIH0sCiAgICBvblN1Ym1pdCgpIHsKICAgICAgLy8gc3VibWl05Yem55CGCiAgICAgIC8vIDEuIOeUu+WDj+OCkuOCouODg+ODl+ODreODvOODieOBmeOCiwogICAgICBpZiAodGhpcy51cGxvYWRGaWxlcyAhPSBudWxsKSB7CiAgICAgICAgQXJyYXkuZnJvbSh0aGlzLnVwbG9hZEZpbGVzKS5mb3JFYWNoKGZpbGUgPT4gewogICAgICAgICAgdGhpcy51cGxvYWRQcm9taXNlTGlzdC5wdXNoKHRoaXMudXBsb2FkSW1nKGZpbGUpKQogICAgICAgIH0pCiAgICAgIH0KICAgICAgLy8gMi4g44Ki44OD44OX44Ot44O844OJ44GM5a6M5LqG44GX44Gf44KJ44GZ44G544Gm44Gu5oOF5aCx44KS5ZCI44KP44Gb44GmUmVhbHRpbWVEQuOBq3NldAogICAgICBQcm9taXNlLmFsbCh0aGlzLnVwbG9hZFByb21pc2VMaXN0KS50aGVuKChJbWFnZVVybHMpID0+IHsKICAgICAgICAvL0FQSeOBi+OCieW4sOOBo+OBpuOBjeOBn0pTT07jgpLjg5Hjg7zjgrnjgZfjgabjgIFVUkzjgpLphY3liJfjgavjgb7jgajjgoHjgosKICAgICAgICBJbWFnZVVybHMuZm9yRWFjaCgoanNvbikgPT4gewogICAgICAgICAgdGhpcy5zdWJtaXRJbWFnZVVybExpc3QucHVzaChqc29uLmRhdGEudXJsKQogICAgICAgIH0pCiAgICAgICAgdmFyIFVzZXJQb3N0SW5mb09iaiA9IHsKICAgICAgICAgIHdoZW46IHRoaXMud2hlbiwKICAgICAgICAgIHdoZXJlOiB0aGlzLndoZXJlLAogICAgICAgICAgd2hvOiB0aGlzLndobywKICAgICAgICAgIHdoYXQ6IHRoaXMud2hhdCwKICAgICAgICAgIGltZ1VybHM6IHRoaXMuc3VibWl0SW1hZ2VVcmxMaXN0CiAgICAgICAgfQogICAgICAgIC8v5b+F6aCI6aCF55uu44Gu44OB44Kn44OD44KvCiAgICAgICAgaWYgKFVzZXJQb3N0SW5mb09iai53aGVuICE9IG51bGwgJiYgVXNlclBvc3RJbmZvT2JqLndoZXJlICE9IG51bGwgJiYgVXNlclBvc3RJbmZvT2JqLndoYXQgIT0gbnVsbCkgewogICAgICAgICAgaWYgKFVzZXJQb3N0SW5mb09iai53aGVuLnJlcGxhY2UoL1xzKy9nLCcnKS5sZW5ndGggPiAwICYmIFVzZXJQb3N0SW5mb09iai53aGVyZS5yZXBsYWNlKC9ccysvZywnJykubGVuZ3RoID4gMCAmJiBVc2VyUG9zdEluZm9PYmoud2hhdC5yZXBsYWNlKC9ccysvZywnJykubGVuZ3RoID4gMCkgewogICAgICAgICAgICAvL0RC44Gr5L+d5a2YCiAgICAgICAgICAgIHRoaXMuc2V0RmlyZWJhc2VSZWFsdGltZURCKFVzZXJQb3N0SW5mb09iaikKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFsZXJ0KCJ3aGVuLCB3aGVyZSwgd2hhdOOBr+W/hemgiOmgheebruOBp+OBmSIpCiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsZXJ0KCJ3aGVuLCB3aGVyZSwgd2hhdOOBr+W/hemgiOmgheebruOBp+OBmSIpCiAgICAgICAgfQogICAgICB9KQogICAgfSwKICAgIHNldEZpcmViYXNlUmVhbHRpbWVEQihPYmopIHsKICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoInBvc3RzLyIrdGhpcy51c2VySW5mby51aWQpLnB1c2goT2JqKS50aGVuKCgpID0+IHsKICAgICAgICBhbGVydCgi5oqV56i/44GX44G+44GX44Gf77yBIikKICAgICAgfSkKICAgICAgLmNhdGNoKChlcnJvcikgPT4gewogICAgICAgIC8vb25FcnJvcgogICAgICAgIGNvbnNvbGUubG9nKCJGaXJlYmFzZSBFcnJvciIsIGVycm9yKQogICAgICAgIGFsZXJ0KCLmipXnqL/jgavlpLHmlZfjgZfjgb7jgZfjgZ8iKQogICAgICB9KQogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIGNvbnN0IF90aGlzID0gdGhpcwoKICAgIGZpcmViYXNlLmF1dGgoKS5vbkF1dGhTdGF0ZUNoYW5nZWQodXNlciA9PiB7CiAgICAgIF90aGlzLmlzU2lnbkluID0gKHVzZXIgIT0gbnVsbCkKICAgICAgX3RoaXMudXNlckluZm8gPSB1c2VyCiAgICAgIF90aGlzLmlzTm93TG9hZGluZyA9IGZhbHNlCiAgICB9KQoKICAgIHRoaXMuSVUgPSBuZXcgSW1nVXBsb2FkZXIoYXhpb3MpCiAgICB0aGlzLlBNID0gbmV3IFBsYWNlc01hbmFnZXIoYXhpb3MpCiAgICAvLyDnj77lnKjlnLDjgpLlj5blvpcKICAgIGlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHsKICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigocG9zaXRpb24pID0+IHsgCiAgICAgICAgdmFyIGRhdGEgPSBwb3NpdGlvbi5jb29yZHMKCSAgICAgIHZhciBsYXQgPSBkYXRhLmxhdGl0dWRlCgkgICAgICB2YXIgbG9uID0gZGF0YS5sb25naXR1ZGUKICAgICAgICAvLyAiLTMzLjg2NzA1MjIiLCAiMTUxLjE5NTczNjIiCiAgICAgICAgLy8g5Y+W5b6X44GX44Gf54++5Zyo5Zyw44KS44KC44Go44Gr6L+R6L6644Gu44Op44Oz44OJ44Oe44O844Kv44KS5Y+W5b6XCiAgICAgICAgdGhpcy5QTS5zZWFyY2huZWFyYnlwbGFjZXNieWxhdGxvbihsYXQsIGxvbikudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgIC8vIHNlbGVjdOOCkuabtOaWsAogICAgICAgICAgcmVzcG9uc2UuZGF0YS5mb3JFYWNoKChwbGFjZSkgPT4gewogICAgICAgICAgICB0aGlzLm5lYXJieVBsYWNlTGlzdC5wdXNoKHBsYWNlKQogICAgICAgICAgfSkKICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKCJQbGFjZXMgTWFuYWdlciBFcnJvciIsIGVycm9yKQogICAgICAgIH0pCiAgICAgIH0sIChlcnJvcikgPT4geyBjb25zb2xlLmxvZygiR2VvTG9jYXRpb24gQVBJIEVycm9yIiwgZXJyb3IpIH0pCiAgICB9IGVsc2UgewogICAgICAvLyDnq6/mnKvjgYxHZW9Mb2NhdGlvbiBBUEnjgavpnZ7lr77lv5zjgaDjgaPjgZ/loLTlkIgKICAgICAgLy8g5pyA6L+R44Gu5aC05omA44KS6YGp5b2T44Gr6KGo56S6CiAgICB9CgogIH0KfQo="},{"version":3,"sources":["RegistEventInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"RegistEventInfo.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"regist\">\n    <div class=\"regist__loading\" v-if=\"isNowLoading\"><!-- Loading --></div>\n    <div class=\"regist__body\" v-else>\n      <div class=\"regist__body__signined\" v-if=\"isSignIn\">\n        <!-- form -->\n        <div><input type=\"datetime-local\" placeholder=\"日付\" v-model=\"when\" /></div>\n        <div><select v-model=\"where\"><option disabled value=\"\">場所</option><option v-for=\"(val, key) in placeList\" v-bind:value=\"val.place_id\" v-bind:disabled=\"val.place_id==null?\\\"disabled\\\":\\\"\\\"\">{{val.name}}</option></select><div><input type=\"text\" v-model=\"whereAdd\" /><button v-on:click=\"onAddWhereButton\">+</button></div></div>\n        <div><select v-model=\"who\"><option disabled value=\"\">誰と行ったか</option><option v-for=\"(val, key) in friendsList\" v-bind:value=\"val.place_id\">{{val.name}}</option></select></div>\n        <div><textarea placeholder=\"したこと\" v-model=\"what\" /></div>\n        <div class=\"imgPreview\">\n          <img v-bind:src=\"src\" v-for=\"(src, key) in previewImageList\" :key=\"key\">\n        </div>\n        <div><input type=\"file\" @change=\"onFileChange\" accept=\"image/*\" multiple /></div>\n        <div><button v-on:click=\"onSubmit\">投稿</button></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport ImgUploader from '../assets/ImgUploader.js'\nimport PlacesManager from '../assets/PlacesManager.js'\nimport firebase from 'firebase'\nvar database = firebase.database()\n\nexport default {\n  name: \"regist\",\n  data () {\n    return {\n      isSignIn: null,\n      userInfo: null,\n      isNowLoading: true,\n      IU: null,\n      PM: null,\n      uploadFiles: null,\n      uploadPromiseList: [],\n      previewImageList: [],\n      submitImageUrlList: [],\n      userAddedPlaceList: [],\n      nearbyPlaceList: [],\n      placeList: [],\n      friendsList: [\n        {id:\"thisisid-dddd\", name:\"Taro\"},\n        {id:\"thisisid-eeee\", name:\"Jiro\"},\n        {id:\"thisisid-ffff\", name:\"Saburo\"}\n      ],\n      whereAdd: null,\n      when: null,\n      where: null,\n      who: null,\n      what: null\n    }\n  },\n  watch: {\n    userAddedPlaceList() {\n      this.onChangePlaceList()\n    },\n    nearbyPlaceList() {\n      this.onChangePlaceList()\n    }\n  },\n  methods: {\n    onFileChange(e) {\n      const files = e.target.files || e.dataTransfer.files;\n      this.uploadFiles = files\n      Array.from(files).forEach(file => {\n        this.createPreviewImage(file)\n      })\n      //this.createPreviewImage(files)\n    },\n    onChangePlaceList() {\n      this.placeList = []\n      this.placeList = this.userAddedPlaceList.concat(this.nearbyPlaceList)\n      //console.log(this.placeList, this.nearbyPlaceList, this.userAddedPlaceList)\n    },\n    createPreviewImage(file) {\n      const reader = new FileReader()\n      reader.onload = e => {\n        this.previewImageList.push(e.target.result)\n      }\n      reader.readAsDataURL(file)\n    },\n    uploadImg(file) {\n      return this.IU.upload(file)\n    },\n    onAddWhereButton() {\n      //this.whereAddで検索してみる\n      this.PM.searchplacesbyname(this.whereAdd).then((response) => {\n        // selectを更新\n        this.userAddedPlaceList = []\n        this.userAddedPlaceList.push({name: \"-- Search Result --\", place_id: null})\n        response.data.forEach((place) => {\n          this.userAddedPlaceList.push(place)\n        })\n        this.userAddedPlaceList.push({name: \"-- GPS Result --\", place_id: null})\n      }).catch((error) => {\n        console.log(\"Places Manager Error\", error)\n      })\n    },\n    onSubmit() {\n      // submit処理\n      // 1. 画像をアップロードする\n      if (this.uploadFiles != null) {\n        Array.from(this.uploadFiles).forEach(file => {\n          this.uploadPromiseList.push(this.uploadImg(file))\n        })\n      }\n      // 2. アップロードが完了したらすべての情報を合わせてRealtimeDBにset\n      Promise.all(this.uploadPromiseList).then((ImageUrls) => {\n        //APIから帰ってきたJSONをパースして、URLを配列にまとめる\n        ImageUrls.forEach((json) => {\n          this.submitImageUrlList.push(json.data.url)\n        })\n        var UserPostInfoObj = {\n          when: this.when,\n          where: this.where,\n          who: this.who,\n          what: this.what,\n          imgUrls: this.submitImageUrlList\n        }\n        //必須項目のチェック\n        if (UserPostInfoObj.when != null && UserPostInfoObj.where != null && UserPostInfoObj.what != null) {\n          if (UserPostInfoObj.when.replace(/\\s+/g,'').length > 0 && UserPostInfoObj.where.replace(/\\s+/g,'').length > 0 && UserPostInfoObj.what.replace(/\\s+/g,'').length > 0) {\n            //DBに保存\n            this.setFirebaseRealtimeDB(UserPostInfoObj)\n          } else {\n            alert(\"when, where, whatは必須項目です\")\n          }\n        } else {\n          alert(\"when, where, whatは必須項目です\")\n        }\n      })\n    },\n    setFirebaseRealtimeDB(Obj) {\n      firebase.database().ref(\"posts/\"+this.userInfo.uid).push(Obj).then(() => {\n        alert(\"投稿しました！\")\n      })\n      .catch((error) => {\n        //onError\n        console.log(\"Firebase Error\", error)\n        alert(\"投稿に失敗しました\")\n      })\n    }\n  },\n  mounted() {\n    const _this = this\n\n    firebase.auth().onAuthStateChanged(user => {\n      _this.isSignIn = (user != null)\n      _this.userInfo = user\n      _this.isNowLoading = false\n    })\n\n    this.IU = new ImgUploader(axios)\n    this.PM = new PlacesManager(axios)\n    // 現在地を取得\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => { \n        var data = position.coords\n\t      var lat = data.latitude\n\t      var lon = data.longitude\n        // \"-33.8670522\", \"151.1957362\"\n        // 取得した現在地をもとに近辺のランドマークを取得\n        this.PM.searchnearbyplacesbylatlon(lat, lon).then((response) => {\n          // selectを更新\n          response.data.forEach((place) => {\n            this.nearbyPlaceList.push(place)\n          })\n        }).catch((error) => {\n          console.log(\"Places Manager Error\", error)\n        })\n      }, (error) => { console.log(\"GeoLocation API Error\", error) })\n    } else {\n      // 端末がGeoLocation APIに非対応だった場合\n      // 最近の場所を適当に表示\n    }\n\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.regist {\n  width: 100%;\n  height: 100%;\n  &__loading {\n    width: 100%;\n    height: 100%;\n  }\n  &__body {\n    width: 100%;\n    height: 100%;\n    &__signined {\n      width: 100%;\n      height: 100%;\n    }\n  }\n}\n.imgPreview > img {\n  width: 100px;\n}\n</style>"]}]}