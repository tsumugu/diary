{"remainingRequest":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tsumugu/Documents/dev/vue/diary/src/views/RegistEventInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tsumugu/Documents/dev/vue/diary/src/views/RegistEventInfo.vue","mtime":1608298741877},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IEltZ1VwbG9hZGVyIGZyb20gJy4uL2Fzc2V0cy9JbWdVcGxvYWRlci5qcycKaW1wb3J0IGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlJwp2YXIgZGF0YWJhc2UgPSBmaXJlYmFzZS5kYXRhYmFzZSgpCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogInJlZ2lzdCIsCiAgZGF0YSAoKSB7CiAgICByZXR1cm4gewogICAgICBpc1NpZ25JbjogbnVsbCwKICAgICAgdXNlckluZm86IG51bGwsCiAgICAgIGlzTm93TG9hZGluZzogdHJ1ZSwKICAgICAgSVU6IG51bGwsCiAgICAgIHVwbG9hZEZpbGVzOiBudWxsLAogICAgICB1cGxvYWRQcm9taXNlTGlzdDogW10sCiAgICAgIHByZXZpZXdJbWFnZUxpc3Q6IFtdLAogICAgICBzdWJtaXRJbWFnZVVybExpc3Q6IFtdLAogICAgICBwbGFjZUxpc3Q6IFsKICAgICAgICB7aWQ6InRoaXNpc2lkLWFhYWEiLCBuYW1lOiJUb2t5byJ9LAogICAgICAgIHtpZDoidGhpc2lzaWQtYmJiYiIsIG5hbWU6Ikt5b3RvIn0sCiAgICAgICAge2lkOiJ0aGlzaXNpZC1jY2NjIiwgbmFtZToiSG9ra2FpZG8ifQogICAgICBdLAogICAgICBmcmllbmRzTGlzdDogWwogICAgICAgIHtpZDoidGhpc2lzaWQtZGRkZCIsIG5hbWU6IlRhcm8ifSwKICAgICAgICB7aWQ6InRoaXNpc2lkLWVlZWUiLCBuYW1lOiJKaXJvIn0sCiAgICAgICAge2lkOiJ0aGlzaXNpZC1mZmZmIiwgbmFtZToiU2FidXJvIn0KICAgICAgXSwKICAgICAgd2hlbjogbnVsbCwKICAgICAgd2hlcmU6IG51bGwsCiAgICAgIHdobzogbnVsbCwKICAgICAgd2hhdDogbnVsbAogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgb25GaWxlQ2hhbmdlKGUpIHsKICAgICAgY29uc3QgZmlsZXMgPSBlLnRhcmdldC5maWxlcyB8fCBlLmRhdGFUcmFuc2Zlci5maWxlczsKICAgICAgdGhpcy51cGxvYWRGaWxlcyA9IGZpbGVzCiAgICAgIEFycmF5LmZyb20oZmlsZXMpLmZvckVhY2goZmlsZSA9PiB7CiAgICAgICAgdGhpcy5jcmVhdGVQcmV2aWV3SW1hZ2UoZmlsZSkKICAgICAgfSkKICAgICAgLy90aGlzLmNyZWF0ZVByZXZpZXdJbWFnZShmaWxlcykKICAgIH0sCiAgICBjcmVhdGVQcmV2aWV3SW1hZ2UoZmlsZSkgewogICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpCiAgICAgIHJlYWRlci5vbmxvYWQgPSBlID0+IHsKICAgICAgICB0aGlzLnByZXZpZXdJbWFnZUxpc3QucHVzaChlLnRhcmdldC5yZXN1bHQpCiAgICAgIH0KICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSkKICAgIH0sCiAgICB1cGxvYWRJbWcoZmlsZSkgewogICAgICByZXR1cm4gdGhpcy5JVS51cGxvYWQoZmlsZSkKICAgIH0sCiAgICBvblN1Ym1pdCgpIHsKICAgICAgLy8gc3VibWl05Yem55CGCiAgICAgIC8vIDEuIOeUu+WDj+OCkuOCouODg+ODl+ODreODvOODieOBmeOCiwogICAgICBpZiAodGhpcy51cGxvYWRGaWxlcyAhPSBudWxsKSB7CiAgICAgICAgQXJyYXkuZnJvbSh0aGlzLnVwbG9hZEZpbGVzKS5mb3JFYWNoKGZpbGUgPT4gewogICAgICAgICAgdGhpcy51cGxvYWRQcm9taXNlTGlzdC5wdXNoKHRoaXMudXBsb2FkSW1nKGZpbGUpKQogICAgICAgIH0pCiAgICAgIH0KICAgICAgLy8gMi4g44Ki44OD44OX44Ot44O844OJ44GM5a6M5LqG44GX44Gf44KJ44GZ44G544Gm44Gu5oOF5aCx44KS5ZCI44KP44Gb44GmUmVhbHRpbWVEQuOBq3NldAogICAgICBQcm9taXNlLmFsbCh0aGlzLnVwbG9hZFByb21pc2VMaXN0KS50aGVuKChJbWFnZVVybHMpID0+IHsKICAgICAgICAvL0FQSeOBi+OCieW4sOOBo+OBpuOBjeOBn0pTT07jgpLjg5Hjg7zjgrnjgZfjgabjgIFVUkzjgpLphY3liJfjgavjgb7jgajjgoHjgosKICAgICAgICBJbWFnZVVybHMuZm9yRWFjaChqc29uID0+IHsKICAgICAgICAgIHRoaXMuc3VibWl0SW1hZ2VVcmxMaXN0LnB1c2goanNvbi5kYXRhLnVybCkKICAgICAgICB9KQogICAgICAgIHZhciBVc2VyUG9zdEluZm9PYmogPSB7CiAgICAgICAgICB3aGVuOiB0aGlzLndoZW4sCiAgICAgICAgICB3aGVyZTogdGhpcy53aGVyZSwKICAgICAgICAgIHdobzogdGhpcy53aG8sCiAgICAgICAgICB3aGF0OiB0aGlzLndoYXQsCiAgICAgICAgICBpbWdVcmxzOiB0aGlzLnN1Ym1pdEltYWdlVXJsTGlzdAogICAgICAgIH0KICAgICAgICAvL+W/hemgiOmgheebruOBruODgeOCp+ODg+OCrwogICAgICAgIGlmIChVc2VyUG9zdEluZm9PYmoud2hlbiAhPSBudWxsICYmIFVzZXJQb3N0SW5mb09iai53aGVyZSAhPSBudWxsICYmIFVzZXJQb3N0SW5mb09iai53aGF0ICE9IG51bGwpIHsKICAgICAgICAgIGlmIChVc2VyUG9zdEluZm9PYmoud2hlbi5yZXBsYWNlKC9ccysvZywnJykubGVuZ3RoID4gMCAmJiBVc2VyUG9zdEluZm9PYmoud2hlcmUucmVwbGFjZSgvXHMrL2csJycpLmxlbmd0aCA+IDAgJiYgVXNlclBvc3RJbmZvT2JqLndoYXQucmVwbGFjZSgvXHMrL2csJycpLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgLy9EQuOBq+S/neWtmAogICAgICAgICAgICB0aGlzLnNldEZpcmViYXNlUmVhbHRpbWVEQihVc2VyUG9zdEluZm9PYmopCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhbGVydCgid2hlbiwgd2hlcmUsIHdoYXTjga/lv4XpoIjpoIXnm67jgafjgZkiKQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGVydCgid2hlbiwgd2hlcmUsIHdoYXTjga/lv4XpoIjpoIXnm67jgafjgZkiKQogICAgICAgIH0KICAgICAgfSkKICAgIH0sCiAgICBzZXRGaXJlYmFzZVJlYWx0aW1lREIoT2JqKSB7CiAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCJwb3N0cy8iK3RoaXMudXNlckluZm8udWlkKS5wdXNoKE9iaikudGhlbigoKSA9PiB7CiAgICAgICAgYWxlcnQoIuaKleeov+OBl+OBvuOBl+OBn++8gSIpCiAgICAgIH0pCiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikgewogICAgICAgIC8vb25FcnJvcgogICAgICAgIGNvbnNvbGUubG9nKGVycm9yKQogICAgICAgIGFsZXJ0KCLmipXnqL/jgavlpLHmlZfjgZfjgb7jgZfjgZ8iKQogICAgICB9KQogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIGNvbnN0IF90aGlzID0gdGhpcwogICAgZmlyZWJhc2UuYXV0aCgpLm9uQXV0aFN0YXRlQ2hhbmdlZCh1c2VyID0+IHsKICAgICAgX3RoaXMuaXNTaWduSW4gPSAodXNlciAhPSBudWxsKQogICAgICBfdGhpcy51c2VySW5mbyA9IHVzZXIKICAgICAgX3RoaXMuaXNOb3dMb2FkaW5nID0gZmFsc2UKICAgIH0pCiAgICB0aGlzLklVID0gbmV3IEltZ1VwbG9hZGVyKGF4aW9zKQogIH0KfQo="},{"version":3,"sources":["RegistEventInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"RegistEventInfo.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"regist\">\n    <div class=\"regist__loading\" v-if=\"isNowLoading\"><!-- Loading --></div>\n    <div class=\"regist__body\" v-else>\n      <div class=\"regist__body__signined\" v-if=\"isSignIn\">\n        <!-- form -->\n        <div><input type=\"datetime-local\" placeholder=\"日付\" v-model=\"when\" /></div>\n        <div><select v-model=\"where\"><option disabled value=\"\">場所</option><option v-for=\"(val, key) in placeList\" v-bind:value=\"val.id\">{{val.name}}</option></select></div>\n        <div><select v-model=\"who\"><option disabled value=\"\">誰と行ったか</option><option v-for=\"(val, key) in friendsList\" v-bind:value=\"val.id\">{{val.name}}</option></select></div>\n        <div><textarea placeholder=\"したこと\" v-model=\"what\" /></div>\n        <div class=\"imgPreview\">\n          <img v-bind:src=\"src\" v-for=\"(src, key) in previewImageList\" :key=\"key\">\n        </div>\n        <div><input type=\"file\" @change=\"onFileChange\" accept=\"image/*\" multiple /></div>\n        <div><button v-on:click=\"onSubmit\">投稿</button></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport ImgUploader from '../assets/ImgUploader.js'\nimport firebase from 'firebase'\nvar database = firebase.database()\n\nexport default {\n  name: \"regist\",\n  data () {\n    return {\n      isSignIn: null,\n      userInfo: null,\n      isNowLoading: true,\n      IU: null,\n      uploadFiles: null,\n      uploadPromiseList: [],\n      previewImageList: [],\n      submitImageUrlList: [],\n      placeList: [\n        {id:\"thisisid-aaaa\", name:\"Tokyo\"},\n        {id:\"thisisid-bbbb\", name:\"Kyoto\"},\n        {id:\"thisisid-cccc\", name:\"Hokkaido\"}\n      ],\n      friendsList: [\n        {id:\"thisisid-dddd\", name:\"Taro\"},\n        {id:\"thisisid-eeee\", name:\"Jiro\"},\n        {id:\"thisisid-ffff\", name:\"Saburo\"}\n      ],\n      when: null,\n      where: null,\n      who: null,\n      what: null\n    }\n  },\n  methods: {\n    onFileChange(e) {\n      const files = e.target.files || e.dataTransfer.files;\n      this.uploadFiles = files\n      Array.from(files).forEach(file => {\n        this.createPreviewImage(file)\n      })\n      //this.createPreviewImage(files)\n    },\n    createPreviewImage(file) {\n      const reader = new FileReader()\n      reader.onload = e => {\n        this.previewImageList.push(e.target.result)\n      }\n      reader.readAsDataURL(file)\n    },\n    uploadImg(file) {\n      return this.IU.upload(file)\n    },\n    onSubmit() {\n      // submit処理\n      // 1. 画像をアップロードする\n      if (this.uploadFiles != null) {\n        Array.from(this.uploadFiles).forEach(file => {\n          this.uploadPromiseList.push(this.uploadImg(file))\n        })\n      }\n      // 2. アップロードが完了したらすべての情報を合わせてRealtimeDBにset\n      Promise.all(this.uploadPromiseList).then((ImageUrls) => {\n        //APIから帰ってきたJSONをパースして、URLを配列にまとめる\n        ImageUrls.forEach(json => {\n          this.submitImageUrlList.push(json.data.url)\n        })\n        var UserPostInfoObj = {\n          when: this.when,\n          where: this.where,\n          who: this.who,\n          what: this.what,\n          imgUrls: this.submitImageUrlList\n        }\n        //必須項目のチェック\n        if (UserPostInfoObj.when != null && UserPostInfoObj.where != null && UserPostInfoObj.what != null) {\n          if (UserPostInfoObj.when.replace(/\\s+/g,'').length > 0 && UserPostInfoObj.where.replace(/\\s+/g,'').length > 0 && UserPostInfoObj.what.replace(/\\s+/g,'').length > 0) {\n            //DBに保存\n            this.setFirebaseRealtimeDB(UserPostInfoObj)\n          } else {\n            alert(\"when, where, whatは必須項目です\")\n          }\n        } else {\n          alert(\"when, where, whatは必須項目です\")\n        }\n      })\n    },\n    setFirebaseRealtimeDB(Obj) {\n      firebase.database().ref(\"posts/\"+this.userInfo.uid).push(Obj).then(() => {\n        alert(\"投稿しました！\")\n      })\n      .catch(function(error) {\n        //onError\n        console.log(error)\n        alert(\"投稿に失敗しました\")\n      })\n    }\n  },\n  mounted() {\n    const _this = this\n    firebase.auth().onAuthStateChanged(user => {\n      _this.isSignIn = (user != null)\n      _this.userInfo = user\n      _this.isNowLoading = false\n    })\n    this.IU = new ImgUploader(axios)\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.regist {\n  width: 100%;\n  height: 100%;\n  &__loading {\n    width: 100%;\n    height: 100%;\n  }\n  &__body {\n    width: 100%;\n    height: 100%;\n    &__signined {\n      width: 100%;\n      height: 100%;\n    }\n  }\n}\n.imgPreview > img {\n  width: 100px;\n}\n</style>"]}]}