{"remainingRequest":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tsumugu/Documents/dev/vue/diary/src/views/RegistEventInfo.vue?vue&type=style&index=0&id=503eab48&scoped=true&lang=scss&","dependencies":[{"path":"/Users/tsumugu/Documents/dev/vue/diary/src/views/RegistEventInfo.vue","mtime":1608394839908},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnJlZ2lzdCB7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwogICZfX2xvYWRpbmcgewogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDEwMCU7CiAgfQogICZfX2JvZHkgewogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICAmX19zaWduaW5lZCB7CiAgICAgIHdpZHRoOiAxMDAlOwogICAgICBoZWlnaHQ6IDEwMCU7CiAgICB9CiAgfQp9Ci5pbWdQcmV2aWV3ID4gaW1nIHsKICB3aWR0aDogMTAwcHg7Cn0K"},{"version":3,"sources":["RegistEventInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RegistEventInfo.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"regist\">\n    <div class=\"regist__loading\" v-if=\"isNowLoading\"><!-- Loading --></div>\n    <div class=\"regist__body\" v-else>\n      <div class=\"regist__body__signined\" v-if=\"isSignIn\">\n        <!-- form -->\n        <div><input type=\"datetime-local\" placeholder=\"日付\" v-model=\"when\" /></div>\n        <div><select v-model=\"where\"><option disabled value=\"\">場所</option><option v-for=\"(val, key) in placeList\" v-bind:value=\"val.place_id\" v-bind:disabled=\"val.place_id==null\">{{val.name}}</option></select><div><input type=\"text\" v-model=\"whereAdd\" /><button v-on:click=\"onAddWhereButton\">+</button></div></div>\n        <div><select v-model=\"who\"><option disabled value=\"\">誰と行ったか</option><option v-for=\"(val, key) in friendsList\" v-bind:value=\"val.friends_id\">{{val.name}}</option></select><div><input type=\"text\" v-model=\"whoAdd\" /><button v-on:click=\"onAddWhoButton\">+</button></div></div>\n        <div><textarea placeholder=\"したこと\" v-model=\"what\" /></div>\n        <div class=\"imgPreview\">\n          <img v-bind:src=\"src\" v-for=\"(src, key) in previewImageList\" :key=\"key\">\n        </div>\n        <div><input type=\"file\" @change=\"onFileChange\" accept=\"image/*\" multiple /></div>\n        <div><button v-on:click=\"onSubmit\">投稿</button></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport ImgUploader from '../assets/ImgUploader.js'\nimport PlacesManager from '../assets/PlacesManager.js'\nimport firebase from 'firebase'\nvar database = firebase.database()\n\nexport default {\n  name: \"regist\",\n  data () {\n    return {\n      isSignIn: null,\n      userInfo: null,\n      isNowLoading: true,\n      IU: null,\n      PM: null,\n      uploadFiles: null,\n      uploadPromiseList: [],\n      previewImageList: [],\n      submitImageUrlList: [],\n      searchResultPlaceList: [],\n      userAddedPlaceList: [],\n      nearbyPlaceList: [],\n      placeList: [],\n      friendsList: [],\n      whereAdd: null,\n      whoAdd: null,\n      when: null,\n      where: null,\n      who: null,\n      what: null\n    }\n  },\n  watch: {\n    isSignIn(after, before) {\n      if (before == null) {\n        this.initLoadFromFirebase()\n      }\n    },\n    userAddedPlaceList() {\n      this.onChangePlaceList()\n    },\n    searchResultPlaceList() {\n      this.onChangePlaceList()\n    },\n    nearbyPlaceList() {\n      this.onChangePlaceList()\n    }\n  },\n  methods: {\n    initLoadFromFirebase() {\n      firebase.database().ref(\"friends/\"+this.userInfo.uid).on('value', (snapshot) =>{\n        var friedsinfo = snapshot.val()\n        this.friendsList = []\n        Object.keys(friedsinfo).forEach(fid => {\n          this.friendsList.push({\n            \"friends_id\": fid,\n            \"name\": friedsinfo[fid].name\n          })\n        })\n      })\n      firebase.database().ref(\"places/\"+this.userInfo.uid).on('value', (snapshot) =>{\n        var placesinfo = snapshot.val()\n        this.userAddedPlaceList = []\n        this.userAddedPlaceList.push({name: \"-- User Saved Place --\", place_id: null})\n        Object.keys(placesinfo).forEach(pid => {\n          this.userAddedPlaceList.push({\n            \"place_id\": pid,\n            \"name\": placesinfo[pid].name\n          })\n        })\n      })\n    },\n    onFileChange(e) {\n      const files = e.target.files || e.dataTransfer.files;\n      this.uploadFiles = files\n      Array.from(files).forEach(file => {\n        this.createPreviewImage(file)\n      })\n      //this.createPreviewImage(files)\n    },\n    onChangePlaceList() {\n      this.placeList = []\n      var concat1 = this.searchResultPlaceList.concat(this.nearbyPlaceList)\n      this.placeList = this.userAddedPlaceList.concat(concat1)\n    },\n    createPreviewImage(file) {\n      const reader = new FileReader()\n      reader.onload = e => {\n        this.previewImageList.push(e.target.result)\n      }\n      reader.readAsDataURL(file)\n    },\n    uploadImg(file) {\n      return this.IU.upload(file)\n    },\n    uniqueStr() {\n      var strong = 1000\n      return new Date().getTime().toString(16)  + Math.floor(strong*Math.random()).toString(16)\n    },\n    onAddWhereButton() {\n      //this.whereAddで検索してみる\n      this.PM.searchplacesbyname(this.whereAdd).then((response) => {\n        // selectを更新\n        this.searchResultPlaceList = []\n        this.searchResultPlaceList.push({name: \"-- New User Add --\", place_id: null})\n        this.searchResultPlaceList.push({name: this.whereAdd, place_id: \"pid_\"+this.uniqueStr()})\n        this.searchResultPlaceList.push({name: \"-- Search Result --\", place_id: null})\n        response.data.forEach((place) => {\n          this.searchResultPlaceList.push(place)\n        })\n      }).catch((error) => {\n        console.log(\"Places Manager Error\", error)\n      })\n    },\n    onAddWhoButton() {\n      firebase.database().ref(\"friends/\"+this.userInfo.uid).push({\"name\":this.whoAdd}).then(() => {\n        alert(\"フレンドを追加しました！\")\n      })\n      .catch((error) => {\n        //onError\n        console.log(\"Firebase Error\", error)\n      })\n    },\n    onSubmit() {\n      // submit処理\n      // 1. 画像をアップロードする\n      if (this.uploadFiles != null) {\n        Array.from(this.uploadFiles).forEach(file => {\n          this.uploadPromiseList.push(this.uploadImg(file))\n        })\n      }\n      // 2. アップロードが完了したらすべての情報を合わせてRealtimeDBにset\n      Promise.all(this.uploadPromiseList).then((ImageUrls) => {\n        //APIから帰ってきたJSONをパースして、URLを配列にまとめる\n        ImageUrls.forEach((json) => {\n          this.submitImageUrlList.push(json.data.url)\n        })\n        var UserPostInfoObj = {\n          when: this.when,\n          where: this.where,\n          who: this.who,\n          what: this.what,\n          imgUrls: this.submitImageUrlList\n        }\n        //必須項目のチェック\n        if (UserPostInfoObj.when != null && UserPostInfoObj.where != null && UserPostInfoObj.what != null) {\n          if (UserPostInfoObj.when.replace(/\\s+/g,'').length > 0 && UserPostInfoObj.where.replace(/\\s+/g,'').length > 0 && UserPostInfoObj.what.replace(/\\s+/g,'').length > 0) {\n            //DBに保存\n            this.setFirebaseRealtimeDB(UserPostInfoObj)\n          } else {\n            alert(\"when, where, whatは必須項目です\")\n          }\n        } else {\n          alert(\"when, where, whatは必須項目です\")\n        }\n      })\n    },\n    setFirebaseRealtimeDB(Obj) {\n      // place_idから名前を取得\n      var place_name = null\n      Object.keys(this.placeList).forEach(k => {\n        if (this.placeList[k].place_id == Obj.where) {\n          place_name = this.placeList[k].name\n          return true;\n        }\n      })\n      // place_idと名前を保存(同名で上書きされるので存在確認はしない)\n      firebase.database().ref(\"places/\"+this.userInfo.uid+\"/\"+Obj.where).set({name: place_name}).then(() => {\n        //\n        firebase.database().ref(\"posts/\"+this.userInfo.uid).push(Obj).then(() => {\n          alert(\"投稿しました！\")\n        })\n        .catch((error) => {\n          //onError\n          console.log(\"Firebase Error\", error)\n          alert(\"投稿に失敗しました\")\n        })\n        //\n      })\n      .catch((error) => {\n        console.log(\"Firebase Error\", error)\n      })\n    }\n  },\n  mounted() {\n    const _this = this\n\n    firebase.auth().onAuthStateChanged(user => {\n      _this.isSignIn = (user != null)\n      _this.userInfo = user\n      _this.isNowLoading = false\n    })\n\n    this.IU = new ImgUploader(axios)\n    this.PM = new PlacesManager(axios)\n\n    // 現在地を取得\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => { \n        var data = position.coords\n\t      var lat = data.latitude\n\t      var lon = data.longitude\n        // \"-33.8670522\", \"151.1957362\"\n        // 取得した現在地をもとに近辺のランドマークを取得\n        this.PM.searchnearbyplacesbylatlon(lat, lon).then((response) => {\n          // selectを更新\n          this.nearbyPlaceList = []\n          this.nearbyPlaceList.push({name: \"-- GPS Result --\", place_id: null})\n          response.data.forEach((place) => {\n            this.nearbyPlaceList.push(place)\n          })\n        }).catch((error) => {\n          console.log(\"Places Manager Error\", error)\n        })\n      }, (error) => { console.log(\"GeoLocation API Error\", error) })\n    } else {\n      // 端末がGeoLocation APIに非対応だった場合\n      // 最近の場所を適当に表示\n    }\n\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.regist {\n  width: 100%;\n  height: 100%;\n  &__loading {\n    width: 100%;\n    height: 100%;\n  }\n  &__body {\n    width: 100%;\n    height: 100%;\n    &__signined {\n      width: 100%;\n      height: 100%;\n    }\n  }\n}\n.imgPreview > img {\n  width: 100px;\n}\n</style>"]}]}