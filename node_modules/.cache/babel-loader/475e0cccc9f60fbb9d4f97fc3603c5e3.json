{"remainingRequest":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/babel-loader/lib/index.js!/Users/tsumugu/Documents/dev/vue/diary/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tsumugu/Documents/dev/vue/diary/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tsumugu/Documents/dev/vue/diary/src/views/RegistEventInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tsumugu/Documents/dev/vue/diary/src/views/RegistEventInfo.vue","mtime":1608295758994},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tsumugu/Documents/dev/vue/diary/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvciI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZSc7CnZhciBkYXRhYmFzZSA9IGZpcmViYXNlLmRhdGFiYXNlKCk7CmltcG9ydCBTMyBmcm9tICdhd3MtczMnOwp2YXIgUzNDb25maWcgPSB7CiAgYnVja2V0TmFtZTogJ3RzdW11Z3UtZGlhcnknLAogIGRpck5hbWU6ICd1cGxvYWRzJywKICByZWdpb246ICdhcC1ub3J0aGVhc3QtMScsCiAgYWNjZXNzS2V5SWQ6ICdBS0lBUk43QUJRWFdSQU81MkozSycsCiAgc2VjcmV0QWNjZXNzS2V5OiAnYllpanBVNFMrZXp4UEFZY25JOWpxU1E3QUc0Y09YZGdTTTgrYVMyVScKfTsKdmFyIFMzQ2xpZW50ID0gbmV3IFMzKFMzQ29uZmlnKTsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJyZWdpc3QiLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpc1NpZ25JbjogbnVsbCwKICAgICAgdXNlckluZm86IG51bGwsCiAgICAgIGlzTm93TG9hZGluZzogdHJ1ZSwKICAgICAgdXBsb2FkRmlsZXM6IG51bGwsCiAgICAgIHVwbG9hZFByb21pc2VMaXN0OiBbXSwKICAgICAgcHJldmlld0ltYWdlTGlzdDogW10sCiAgICAgIHBsYWNlTGlzdDogW3sKICAgICAgICBpZDogInRoaXNpc2lkLWFhYWEiLAogICAgICAgIG5hbWU6ICJUb2t5byIKICAgICAgfSwgewogICAgICAgIGlkOiAidGhpc2lzaWQtYmJiYiIsCiAgICAgICAgbmFtZTogIkt5b3RvIgogICAgICB9LCB7CiAgICAgICAgaWQ6ICJ0aGlzaXNpZC1jY2NjIiwKICAgICAgICBuYW1lOiAiSG9ra2FpZG8iCiAgICAgIH1dLAogICAgICBmcmllbmRzTGlzdDogW3sKICAgICAgICBpZDogInRoaXNpc2lkLWRkZGQiLAogICAgICAgIG5hbWU6ICJUYXJvIgogICAgICB9LCB7CiAgICAgICAgaWQ6ICJ0aGlzaXNpZC1lZWVlIiwKICAgICAgICBuYW1lOiAiSmlybyIKICAgICAgfSwgewogICAgICAgIGlkOiAidGhpc2lzaWQtZmZmZiIsCiAgICAgICAgbmFtZTogIlNhYnVybyIKICAgICAgfV0sCiAgICAgIHdoZW46IG51bGwsCiAgICAgIHdoZXJlOiBudWxsLAogICAgICB3aG86IG51bGwsCiAgICAgIHdoYXQ6IG51bGwKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBvbkZpbGVDaGFuZ2U6IGZ1bmN0aW9uIG9uRmlsZUNoYW5nZShlKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGZpbGVzID0gZS50YXJnZXQuZmlsZXMgfHwgZS5kYXRhVHJhbnNmZXIuZmlsZXM7CiAgICAgIHRoaXMudXBsb2FkRmlsZXMgPSBmaWxlczsKICAgICAgQXJyYXkuZnJvbShmaWxlcykuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkgewogICAgICAgIF90aGlzMi5jcmVhdGVQcmV2aWV3SW1hZ2UoZmlsZSk7CiAgICAgIH0pOyAvL3RoaXMuY3JlYXRlUHJldmlld0ltYWdlKGZpbGVzKQogICAgfSwKICAgIGNyZWF0ZVByZXZpZXdJbWFnZTogZnVuY3Rpb24gY3JlYXRlUHJldmlld0ltYWdlKGZpbGUpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKCiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkgewogICAgICAgIF90aGlzMy5wcmV2aWV3SW1hZ2VMaXN0LnB1c2goZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKCiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpOwogICAgfSwKICAgIGdlblJhbmRvbUZpbGVOYW1lOiBmdW5jdGlvbiBnZW5SYW5kb21GaWxlTmFtZSgpIHsKICAgICAgdmFyIHN0cm9uZyA9IDEwMDA7CiAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKS50b1N0cmluZygxNikgKyBNYXRoLmZsb29yKHN0cm9uZyAqIE1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDE2KTsKICAgIH0sCiAgICB1cGxvYWRJbWc6IGZ1bmN0aW9uIHVwbG9hZEltZyhmaWxlLCBuZXdGaWxlTmFtZSkgewogICAgICAvL3JldHVybiBTM0NsaWVudC51cGxvYWRGaWxlKGZpbGUsIG5ld0ZpbGVOYW1lKQogICAgICAvLyBTVFVCCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgcmVzb2x2ZSgiaHR0cHM6Ly9leGFtcGxlLmNvbS94eHguanBnIik7CiAgICAgIH0pOwogICAgfSwKICAgIG9uU3VibWl0OiBmdW5jdGlvbiBvblN1Ym1pdCgpIHsKICAgICAgLy/lv4XpoIjpoIXnm67jga7jg4Hjgqfjg4Pjgq8KICAgICAgdGhpcy5zdWJtaXRBbGwoKTsKICAgICAgLyoKICAgICAgaWYgKFVzZXJQb3N0SW5mb09iai53aGVuICE9IG51bGwgJiYgVXNlclBvc3RJbmZvT2JqLndoZXJlICE9IG51bGwgJiYgVXNlclBvc3RJbmZvT2JqLndoYXQgIT0gbnVsbCkgewogICAgICAgIGlmIChVc2VyUG9zdEluZm9PYmoud2hlbi5yZXBsYWNlKC9ccysvZywnJykubGVuZ3RoID4gMCAmJiBVc2VyUG9zdEluZm9PYmoud2hlcmUucmVwbGFjZSgvXHMrL2csJycpLmxlbmd0aCA+IDAgJiYgVXNlclBvc3RJbmZvT2JqLndoYXQucmVwbGFjZSgvXHMrL2csJycpLmxlbmd0aCA+IDApIHsKICAgICAgICAgIC8vCiAgICAgICAgICBzdWJtaXRBbGwoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWxlcnQoIndoZW4sIHdoZXJlLCB3aGF044Gv5b+F6aCI6aCF55uu44Gn44GZIikKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWxlcnQoIndoZW4sIHdoZXJlLCB3aGF044Gv5b+F6aCI6aCF55uu44Gn44GZIikKICAgICAgfQogICAgICAqLwogICAgfSwKICAgIHN1Ym1pdEFsbDogZnVuY3Rpb24gc3VibWl0QWxsKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIC8vIHN1Ym1pdOWHpueQhgogICAgICAvLyAxLiDnlLvlg4/jgpJTM+OBq+OCouODg+ODl+ODreODvOODieOBmeOCiwogICAgICBpZiAodGhpcy51cGxvYWRGaWxlcyAhPSBudWxsKSB7CiAgICAgICAgQXJyYXkuZnJvbSh0aGlzLnVwbG9hZEZpbGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7CiAgICAgICAgICBfdGhpczQudXBsb2FkUHJvbWlzZUxpc3QucHVzaChfdGhpczQudXBsb2FkSW1nKGZpbGUsIF90aGlzNC5nZW5SYW5kb21GaWxlTmFtZSgpKSk7CiAgICAgICAgfSk7CiAgICAgIH0gLy8gMi4g44Ki44OD44OX44Ot44O844OJ44GM5a6M5LqG44GX44Gf44KJ44GZ44G544Gm44Gu5oOF5aCx44KS5ZCI44KP44Gb44GmUmVhbHRpbWVEQuOBq3NldAoKCiAgICAgIFByb21pc2UuYWxsKHRoaXMudXBsb2FkUHJvbWlzZUxpc3QpLnRoZW4oZnVuY3Rpb24gKFMzSW1hZ2VVcmxzKSB7CiAgICAgICAgY29uc29sZS5sb2coUzNJbWFnZVVybHMpOyAvL0RFQlVHCgogICAgICAgIC8qCiAgICAgICAgdmFyIFVzZXJQb3N0SW5mb09iaiA9IHsKICAgICAgICAgIHdoZW46IHRoaXMud2hlbiwKICAgICAgICAgIHdoZXJlOiB0aGlzLndoZXJlLAogICAgICAgICAgd2hvOiB0aGlzLndobywKICAgICAgICAgIHdoYXQ6IHRoaXMud2hhdCwKICAgICAgICAgIGltZ1VybHM6IFMzSW1hZ2VVcmxzCiAgICAgICAgfQogICAgICAgIC8vRELjgavkv53lrZgKICAgICAgICB0aGlzLnNldEZpcmViYXNlUmVhbHRpbWVEQihVc2VyUG9zdEluZm9PYmopCiAgICAgICAgKi8KICAgICAgfSk7CiAgICB9LAogICAgc2V0RmlyZWJhc2VSZWFsdGltZURCOiBmdW5jdGlvbiBzZXRGaXJlYmFzZVJlYWx0aW1lREIoT2JqKSB7CiAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCJwb3N0cy8iICsgdGhpcy51c2VySW5mby51aWQpLnB1c2goT2JqKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBhbGVydCgi5oqV56i/44GX44G+44GX44Gf77yBIik7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIC8vb25FcnJvcgogICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgICBhbGVydCgi5oqV56i/44Gr5aSx5pWX44GX44G+44GX44GfIik7CiAgICAgIH0pOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgZmlyZWJhc2UuYXV0aCgpLm9uQXV0aFN0YXRlQ2hhbmdlZChmdW5jdGlvbiAodXNlcikgewogICAgICBfdGhpcy5pc1NpZ25JbiA9IHVzZXIgIT0gbnVsbDsKICAgICAgX3RoaXMudXNlckluZm8gPSB1c2VyOwogICAgICBfdGhpcy5pc05vd0xvYWRpbmcgPSBmYWxzZTsKICAgIH0pOwogIH0KfTs="},{"version":3,"sources":["RegistEventInfo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"regist\">\n    <div class=\"regist__loading\" v-if=\"isNowLoading\"><!-- Loading --></div>\n    <div class=\"regist__body\" v-else>\n      <div class=\"regist__body__signined\" v-if=\"isSignIn\">\n        <!-- form -->\n        <div><input type=\"datetime-local\" placeholder=\"日付\" v-model=\"when\" /></div>\n        <div><select v-model=\"where\"><option disabled value=\"\">場所</option><option v-for=\"(val, key) in placeList\" v-bind:value=\"val.id\">{{val.name}}</option></select></div>\n        <div><select v-model=\"who\"><option disabled value=\"\">誰と行ったか</option><option v-for=\"(val, key) in friendsList\" v-bind:value=\"val.id\">{{val.name}}</option></select></div>\n        <div><textarea placeholder=\"したこと\" v-model=\"what\" /></div>\n        <div class=\"imgPreview\">\n          <img v-bind:src=\"src\" v-for=\"(src, key) in previewImageList\" :key=\"key\">\n        </div>\n        <div><input type=\"file\" @change=\"onFileChange\" accept=\"image/*\" multiple /></div>\n        <div><button v-on:click=\"onSubmit\">投稿</button></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport firebase from 'firebase'\nvar database = firebase.database();\n\nimport S3 from 'aws-s3';\nconst S3Config = {\n  bucketName: 'tsumugu-diary',\n  dirName: 'uploads',\n  region: 'ap-northeast-1',\n  accessKeyId: 'AKIARN7ABQXWRAO52J3K',\n  secretAccessKey: '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'\n}\nconst S3Client = new S3(S3Config)\n\nexport default {\n  name: \"regist\",\n  data () {\n    return {\n      isSignIn: null,\n      userInfo: null,\n      isNowLoading: true,\n      uploadFiles: null,\n      uploadPromiseList: [],\n      previewImageList: [],\n      placeList: [\n        {id:\"thisisid-aaaa\", name:\"Tokyo\"},\n        {id:\"thisisid-bbbb\", name:\"Kyoto\"},\n        {id:\"thisisid-cccc\", name:\"Hokkaido\"}\n      ],\n      friendsList: [\n        {id:\"thisisid-dddd\", name:\"Taro\"},\n        {id:\"thisisid-eeee\", name:\"Jiro\"},\n        {id:\"thisisid-ffff\", name:\"Saburo\"}\n      ],\n      when: null,\n      where: null,\n      who: null,\n      what: null\n    }\n  },\n  methods: {\n    onFileChange(e) {\n      const files = e.target.files || e.dataTransfer.files;\n      this.uploadFiles = files\n      Array.from(files).forEach(file => {\n        this.createPreviewImage(file)\n      });\n      //this.createPreviewImage(files)\n    },\n    createPreviewImage(file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        this.previewImageList.push(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    },\n    genRandomFileName() {\n      var strong = 1000;\n      return new Date().getTime().toString(16)  + Math.floor(strong*Math.random()).toString(16)\n    },\n    uploadImg(file, newFileName) {\n      //return S3Client.uploadFile(file, newFileName)\n      // STUB\n      return new Promise((resolve, reject) => {\n        resolve(\"https://example.com/xxx.jpg\");\n      });\n    },\n    onSubmit() {\n      //必須項目のチェック\n      this.submitAll();\n      /*\n      if (UserPostInfoObj.when != null && UserPostInfoObj.where != null && UserPostInfoObj.what != null) {\n        if (UserPostInfoObj.when.replace(/\\s+/g,'').length > 0 && UserPostInfoObj.where.replace(/\\s+/g,'').length > 0 && UserPostInfoObj.what.replace(/\\s+/g,'').length > 0) {\n          //\n          submitAll();\n        } else {\n          alert(\"when, where, whatは必須項目です\")\n        }\n      } else {\n        alert(\"when, where, whatは必須項目です\")\n      }\n      */\n    },\n    submitAll() {\n      // submit処理\n      // 1. 画像をS3にアップロードする\n      if (this.uploadFiles != null) {\n        Array.from(this.uploadFiles).forEach(file => {\n          this.uploadPromiseList.push(this.uploadImg(file, this.genRandomFileName()))\n        });\n      }\n      // 2. アップロードが完了したらすべての情報を合わせてRealtimeDBにset\n      Promise.all(this.uploadPromiseList).then((S3ImageUrls) => {\n        console.log(S3ImageUrls)\n        //DEBUG\n        /*\n        var UserPostInfoObj = {\n          when: this.when,\n          where: this.where,\n          who: this.who,\n          what: this.what,\n          imgUrls: S3ImageUrls\n        }\n        //DBに保存\n        this.setFirebaseRealtimeDB(UserPostInfoObj)\n        */\n      });\n    },\n    setFirebaseRealtimeDB(Obj) {\n      firebase.database().ref(\"posts/\"+this.userInfo.uid).push(Obj).then(() => {\n        alert(\"投稿しました！\")\n      })\n      .catch(function(error) {\n        //onError\n        console.log(error)\n        alert(\"投稿に失敗しました\")\n      })\n    }\n  },\n  mounted() {\n    const _this = this\n    firebase.auth().onAuthStateChanged(user => {\n      _this.isSignIn = (user != null)\n      _this.userInfo = user\n      _this.isNowLoading = false\n    })\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.regist {\n  width: 100%;\n  height: 100%;\n  &__loading {\n    width: 100%;\n    height: 100%;\n  }\n  &__body {\n    width: 100%;\n    height: 100%;\n    &__signined {\n      width: 100%;\n      height: 100%;\n    }\n  }\n}\n.imgPreview > img {\n  width: 100px;\n}\n</style>"],"sourceRoot":"src/views"}]}